// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  TEAM
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?          @unique
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  role            UserRole?        @default(USER)
  bio             String?
  realName        String?
  rolesInTeam     String[]
  education       String[]
  achievements    String[]

  socials         SocialMediaInfo[] // Связь с социальными сетями
  accounts        Account[]         // Связь с аккаунтами
  sessions        Session[]         // Связь с сессиями
  authenticators  Authenticator[]   // Для WebAuthn

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Social {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String            @unique               // Поле должно быть уникальным
  image       String?           // Логотип или иконка социальной сети

  // Обратная связь с SocialMediaInfo
  socialMedia SocialMediaInfo[]
}

model SocialMediaInfo {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  link       String   // Ссылка на профиль пользователя в соц. сети

  userId     String
  user       User     @relation(fields: [userId], references: [id]) // Связь с пользователем

  socialId   String
  social     Social   @relation(fields: [socialId], references: [id]) // Связь с соц. сетью

  createdAt  DateTime @default(now())
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}