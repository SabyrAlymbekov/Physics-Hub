// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  TEAM
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?

  image        String?
  role         UserRole? @default(USER)
  bio          String?
  education    String[]
  achievements String[]
  roles        String[]
  projects     String[]
  interests    String[]

  rolesInTeam    String[]
  socials        String[] // ссылки вида "SocialMediaName:link"
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Topic {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String          @unique
  bookCount      Int             @default(0) // Field to store the number of textbooks
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Textbook {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  authors     String[]
  tags        String[]
  filePath    String?
  source      String?
  sourceLabel String?
  storagePath String?
  topicIds    String[]        @db.ObjectId
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("textbooks")
}

// olympiads

model Olympiad {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  logoStorageUrl      String?
  logoUrl             String
  coverStorageUrl     String?
  coverUrl            String
  regulationsStorageUrl String?
  regulationsUrl      String? // Опционально
  registrationStart   DateTime? // либо дата либо неопределено
  registrationEnd     DateTime? // либо дата либо неопределено
  stages              Stage[]
  resultsDate         DateTime? // либо дата либо неопределено
  resultsUrl          String? // Опционально
  description         String?
  participantCount    Int?
  socialLinks         String? // Ссылки на соц. сети
  registrationFormUrl String?
  organizers          Organizer[]
  regions             String[] // Регионы проведения олимпиады
  priority            Int         @default(0) // Приоритет олимпиады. Чем больше число, тем выше приоритет.

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Stage {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  olympiad   Olympiad  @relation(fields: [olympiadId], references: [id])
  olympiadId String    @db.ObjectId
  name       String
  Date  DateTime? // либо дата либо неопределено
  startTime    String? // либо время либо неопределено. В формате "HH:MM" 24-часовой
  endTime    String? // либо время либо неопределено. В формате "HH:MM" 24-часовой
  toPracticeLink String?
}

model Organizer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  olympiad   Olympiad @relation(fields: [olympiadId], references: [id])
  olympiadId String   @db.ObjectId
  logoUrl    String
  name       String
  link       String
}

// shop

model Product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  images       String[] // URLs of the images
  imagePaths   String[] // Storage paths in Firebase Storage
  inStock      Boolean
  sizes        String[]
  type         String
  price        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
